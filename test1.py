import operator

class Product:
    id=0
    description=""
    numElemSearch=0
    categorie=""
    priceTotal =0

    def __init__(self, _id, _description, _numElemSearch,_cate):
        self.id =_id
        self.description = _description
        self.numElemSearch = _numElemSearch
        self.categorie = _cate

class Products:
    id=0
    description=""
    numElemSearch=0
    categorie=""
    priceTotal =0

    def __init__(self, _id, _description, _numElemSearch,_cate,priceT):
        self.id =_id
        self.description = _description
        self.numElemSearch = _numElemSearch
        self.categorie = _cate
        self.priceTotal = priceT




listCountProduct = {}

#DATOS DE ENTRADA



lifestore_products = [
    [1, 'Procesador AMD Ryzen 3 3300X S-AM4, 3.80GHz, Quad-Core, 16MB L2 Cache', 3019, 'procesadores', 16],
    [2, 'Procesador AMD Ryzen 5 3600, S-AM4, 3.60GHz, 32MB L3 Cache, con Disipador Wraith Stealth', 4209, 'procesadores', 182],
    [3, 'Procesador AMD Ryzen 5 2600, S-AM4, 3.40GHz, Six-Core, 16MB L3 Cache, con Disipador Wraith Stealth', 3089, 'procesadores', 987],
    [4, 'Procesador AMD Ryzen 3 3200G con Gráficos Radeon Vega 8, S-AM4, 3.60GHz, Quad-Core, 4MB L3, con Disipador Wraith Spire', 2209, 'procesadores', 295],
    [5, 'Procesador Intel Core i3-9100F, S-1151, 3.60GHz, Quad-Core, 6MB Cache (9na. Generación - Coffee Lake)', 1779, 'procesadores', 130],
    [6, 'Procesador Intel Core i9-9900K, S-1151, 3.60GHz, 8-Core, 16MB Smart Cache (9na. Generación Coffee Lake)', 11809, 'procesadores', 54],
    [7, 'Procesador Intel Core i7-9700K, S-1151, 3.60GHz, 8-Core, 12MB Smart Cache (9na. Generación Coffee Lake)', 8559, 'procesadores', 114],
    [8, 'Procesador Intel Core i5-9600K, S-1151, 3.70GHz, Six-Core, 9MB Smart Cache (9na. Generiación - Coffee Lake)', 5399, 'procesadores', 8],
    [9, 'Procesador Intel Core i3-8100, S-1151, 3.60GHz, Quad-Core, 6MB Smart Cache (8va. Generación - Coffee Lake)', 2549, 'procesadores', 35],
    [10, 'MSI GeForce 210, 1GB GDDR3, DVI, VGA, HDCP, PCI Express 2.0', 889, 'tarjetas de video', 13],
    [11, 'Tarjeta de Video ASUS AMD Radeon RX 570, 4GB 256-bit GDDR5, PCI Express 3.0', 7399, 'tarjetas de video', 2],
    [12, 'Tarjeta de Video ASUS NVIDIA GeForce GTX 1660 SUPER EVO OC, 6GB 192-bit GDDR6, PCI Express x16 3.0', 6619, 'tarjetas de video', 0],
    [13, 'Tarjeta de Video Asus NVIDIA GeForce GTX 1050 Ti Phoenix, 4GB 128-bit GDDR5, PCI Express 3.0', 3989, 'tarjetas de video', 1],
    [14, 'Tarjeta de Video EVGA NVIDIA GeForce GT 710, 2GB 64-bit GDDR3, PCI Express 2.0', 1439, 'tarjetas de video', 36],
    [15, 'Tarjeta de Video EVGA NVIDIA GeForce GTX 1660 Ti SC Ultra Gaming, 6GB 192-bit GDDR6, PCI 3.0', 8439, 'tarjetas de video', 15],
    [16, 'Tarjeta de Video EVGA NVIDIA GeForce RTX 2060 SC ULTRA Gaming, 6GB 192-bit GDDR6, PCI Express 3.0', 9799, 'tarjetas de video', 10],
    [17, 'Tarjeta de Video Gigabyte AMD Radeon R7 370 OC, 2GB 256-bit GDDR5, PCI Express 3.0', 4199, 'tarjetas de video', 1],
    [18, 'Tarjeta de Video Gigabyte NVIDIA GeForce GT 1030, 2GB 64-bit GDDR5, PCI Express x16 3.0', 2199, 'tarjetas de video', 5],
    [19, 'Tarjeta de Video Gigabyte NVIDIA GeForce GTX 1650 OC Low Profile, 4GB 128-bit GDDR5, PCI Express 3.0 x16', 4509, 'tarjetas de video', 8],
    [20, 'Tarjeta de Video Gigabyte NVIDIA GeForce RTX 2060 SUPER WINDFORCE OC, 8 GB 256 bit GDDR6, PCI Express x16 3.0', 11509, 'tarjetas de video', 10],
    [21, 'Tarjeta de Video MSI AMD Mech Radeon RX 5500 XT MECH Gaming OC, 8GB 128-bit GDDR6, PCI Express 4.0', 5159, 'tarjetas de video', 0],
    [22, 'Tarjeta de Video MSI NVIDIA GeForce GTX 1050 Ti OC, 4GB 128-bit GDDR5, PCI Express x16 3.0', 3429, 'tarjetas de video', 0],
    [23, 'Tarjeta de Video MSI Radeon X1550, 128MB 64 bit GDDR2, PCI Express x16', 909, 'tarjetas de video', 10],
    [24, 'Tarjeta de Video PNY NVIDIA GeForce RTX 2080, 8GB 256-bit GDDR6, PCI Express 3.0\xa0', 30449, 'tarjetas de video', 2],
    [25, 'Tarjeta de Video Sapphire AMD Pulse Radeon RX 5500 XT Gaming, 8GB 128-bit GDDR6, PCI Express 4.0', 5529, 'tarjetas de video', 10],
    [26, 'Tarjeta de Video VisionTek AMD Radeon HD 5450, 1GB DDR3, PCI Express x16 2.1', 1249, 'tarjetas de video', 180],
    [27, 'Tarjeta de Video VisionTek AMD Radeon HD5450, 2GB GDDR3, PCI Express x16', 2109, 'tarjetas de video', 43],
    [28, 'Tarjeta de Video Zotac NVIDIA GeForce GTX 1660 Ti, 6GB 192-bit GDDR6, PCI Express x16 3.0', 9579, 'tarjetas de video', 3],
    [29, 'Tarjeta Madre ASUS micro ATX TUF B450M-PLUS GAMING, S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 2499, 'tarjetas madre', 10],
    [30, 'Tarjeta Madre AORUS ATX Z390 ELITE, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel', 4029, 'tarjetas madre', 50],
    [31, 'Tarjeta Madre AORUS micro ATX B450 AORUS M (rev. 1.0), S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 2229, 'tarjetas madre', 120],
    [32, 'Tarjeta Madre ASRock Z390 Phantom Gaming 4, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 4309, 'tarjetas madre', 10],
    [33, 'Tarjeta Madre ASUS ATX PRIME Z390-A, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 4269, 'tarjetas madre', 43],
    [34, 'Tarjeta Madre ASUS ATX ROG STRIX B550-F GAMING WI-FI, S-AM4, AMD B550, HDMI, max. 128GB DDR4 para AMD', 5289, 'tarjetas madre', 2],
    [35, 'Tarjeta Madre Gigabyte micro ATX Z390 M GAMING, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel\xa0', 3419, 'tarjetas madre', 30],
    [36, 'Tarjeta Madre Gigabyte micro ATX Z490M GAMING X (rev. 1.0), Intel Z490, HDMI, 128GB DDR4 para Intel', 4159, 'tarjetas madre', 10],
    [37, 'Tarjeta Madre ASRock ATX Z490 STEEL LEGEND, S-1200, Intel Z490, HDMI, 128GB DDR4 para Intel', 4289, 'tarjetas madre', 60],
    [38, 'Tarjeta Madre Gigabyte Micro ATX H310M DS2 2.0, S-1151, Intel H310, 32GB DDR4 para Intel\xa0', 1369, 'tarjetas madre', 15],
    [39, 'ASUS T. Madre uATX M4A88T-M, S-AM3, DDR3 para Phenom II/Athlon II/Sempron 100', 2169, 'tarjetas madre', 98],
    [40, 'Tarjeta Madre Gigabyte XL-ATX TRX40 Designare, S-sTRX4, AMD TRX40, 256GB DDR4 para AMD', 17439, 'tarjetas madre', 1],
    [41, 'Tarjeta Madre ASUS micro ATX Prime H370M-Plus/CSM, S-1151, Intel H370, HDMI, 64GB DDR4 para Intel', 3329, 'tarjetas madre', 286],
    [42, 'Tarjeta Madre ASRock Micro ATX B450M Steel Legend, S-AM4, AMD B450, HDMI, 64GB DDR4 para AMD', 1779, 'tarjetas madre', 0],
    [43, 'Tarjeta Madre ASUS ATX ROG STRIX Z390-E GAMING, S-1151, Intel Z390, HDMI, 64GB DDR4 para Intel', 6369, 'tarjetas madre', 5],
    [44, 'Tarjeta Madre MSI ATX B450 TOMAHAWK MAX, S-AM4, AMD B450, 64GB DDR4 para AMD', 2759, 'tarjetas madre', 0],
    [45, 'Tarjeta Madre ASRock ATX H110 Pro BTC+, S-1151, Intel H110, 32GB DDR4, para Intel', 2869, 'tarjetas madre', 25],
    [46, 'Tarjeta Madre Gigabyte micro ATX GA-H110M-DS2, S-1151, Intel H110, 32GB DDR4 para Intel', 1539, 'tarjetas madre', 49],
    [47, 'SSD XPG SX8200 Pro, 256GB, PCI Express, M.2', 1209, 'discos duros', 8],
    [48, 'SSD Kingston A2000 NVMe, 1TB, PCI Express 3.0, M2', 2559, 'discos duros', 50],
    [49, 'Kit SSD Kingston KC600, 1TB, SATA III, 2.5, 7mm', 3139, 'discos duros', 3],
    [50, 'SSD Crucial MX500, 1TB, SATA III, M.2', 2949, 'discos duros', 4],
    [51, 'SSD Kingston UV500, 480GB, SATA III, mSATA', 2399, 'discos duros', 0],
    [52, 'SSD Western Digital WD Blue 3D NAND, 2TB, M.2', 5659, 'discos duros', 13],
    [53, 'SSD Addlink Technology S70, 512GB, PCI Express 3.0, M.2', 2039, 'discos duros', 1],
    [54, "SSD Kingston A400, 120GB, SATA III, 2.5'', 7mm", 259, 'discos duros', 300],
    [55, 'SSD para Servidor Supermicro SSD-DM128-SMCMVN1, 128GB, SATA III, mSATA, 6Gbit/s', 4399, 'discos duros', 10],
    [56, "SSD para Servidor Lenovo Thinksystem S4500, 480GB, SATA III, 3.5'', 7mm", 3269, 'discos duros', 3],
    [57, "SSD Adata Ultimate SU800, 256GB, SATA III, 2.5'', 7mm", 889, 'discos duros', 15],
    [58, "SSD para Servidor Lenovo Thinksystem S4510, 480GB, SATA III, 2.5'', 7mm", 3679, 'discos duros', 16],
    [59, 'SSD Samsung 860 EVO, 1TB, SATA III, M.2', 5539, 'discos duros', 10],
    [60, 'Kit Memoria RAM Corsair Dominator Platinum DDR4, 3200MHz, 16GB (2x 8GB), Non-ECC, CL16, XMP', 2519, 'memorias usb', 10],
    [61, 'Kit Memoria RAM Corsair Vengeance LPX DDR4, 2400MHz, 32GB, Non-ECC, CL16', 5209, 'memorias usb', 5],
    [62, "Makena Smart TV LED 32S2 32'', HD, Widescreen, Gris", 2899, 'pantallas', 6],
    [63, 'Seiki TV LED SC-39HS950N 38.5, HD, Widescreen, Negro', 3369, 'pantallas', 146],
    [64, 'Samsung TV LED LH43QMREBGCXGO 43, 4K Ultra HD, Widescreen, Negro', 12029, 'pantallas', 71],
    [65, 'Samsung Smart TV LED UN70RU7100FXZX 70, 4K Ultra HD, Widescreen, Negro', 21079, 'pantallas', 7],
    [66, 'TCL Smart TV LED 55S425 54.6, 4K Ultra HD, Widescreen, Negro', 8049, 'pantallas', 188],
    [67, 'TV Monitor LED 24TL520S-PU 24, HD, Widescreen, HDMI, Negro', 3229, 'pantallas', 411],
    [68, "Makena Smart TV LED 40S2 40'', Full HD, Widescreen, Negro", 4229, 'pantallas', 239],
    [69, 'Hisense Smart TV LED 40H5500F 39.5, Full HD, Widescreen, Negro', 5359, 'pantallas', 94],
    [70, 'Samsung Smart TV LED 43, Full HD, Widescreen, Negro', 7679, 'pantallas', 10],
    [71, 'Samsung Smart TV LED UN32J4290AF 32, HD, Widescreen, Negro', 4829, 'pantallas', 3],
    [72, 'Hisense Smart TV LED 50H8F 49.5, 4K Ultra HD, Widescreen, Negro', 9759, 'pantallas', 11],
    [73, 'Samsung Smart TV LED UN55TU7000FXZX 55, 4K Ultra HD, Widescreen, Negro/Gris', 10559, 'pantallas', 4],
    [74, 'Logitech Bocinas para Computadora con Subwoofer G560, Bluetooth, Inalámbrico, 2.1, 120W RMS, USB, negro', 4239, 'bocinas', 1],
    [75, 'Lenovo Barra de Sonido, Alámbrico, 2.5W, USB, Negro', 441, 'bocinas', 11],
    [76, 'Acteck Bocina con Subwoofer AXF-290, Bluetooth, Inalámbrico, 2.1, 18W RMS, 180W PMPO, USB, Negro', 589, 'bocinas', 18],
    [77, 'Verbatim Bocina Portátil Mini, Bluetooth, Inalámbrico, 3W RMS, USB, Blanco', 178, 'bocinas', 1],
    [78, 'Ghia Bocina Portátil BX300, Bluetooth, Inalámbrico, 40W RMS, USB, Rojo - Resistente al Agua', 769, 'bocinas', 2],
    [79, 'Naceb Bocina Portátil NA-0301, Bluetooth, Inalámbrico, USB 2.0, Rojo', 709, 'bocinas', 31],
    [80, 'Ghia Bocina Portátil BX800, Bluetooth, Inalámbrico, 2.1 Canales, 31W, USB, Negro', 1359, 'bocinas', 15],
    [81, 'Ghia Bocina Portátil BX900, Bluetooth, Inalámbrico, 2.1 Canales, 34W, USB, Negro - Resistente al Agua', 1169, 'bocinas', 20],
    [82, 'Ghia Bocina Portátil BX400, Bluetooth, Inalámbrico, 8W RMS, USB, Negro', 549, 'bocinas', 31],
    [83, 'Ghia Bocina Portátil BX500, Bluetooth, Inalámbrico, 10W RMS, USB, Gris', 499, 'bocinas', 16],
    [84, 'Logitech Audífonos Gamer G332, Alámbrico, 2 Metros, 3.5mm, Negro/Rojo', 1089, 'audifonos', 83],
    [85, 'Logitech Audífonos Gamer G635 7.1, Alámbrico, 1.5 Metros, 3.5mm, Negro/Azul', 2159, 'audifonos', 39],
    [86, 'ASUS Audífonos Gamer ROG Theta 7.1, Alámbrico, USB C, Negro', 8359, 'audifonos', 20],
    [87, 'Acer Audífonos Gamer Galea 300, Alámbrico, 3.5mm, Negro', 1719, 'audifonos', 8],
    [88, 'Audífonos Gamer Balam Rush Orphix RGB 7.1, Alámbrico, USB, Negro', 909, 'audifonos', 15],
    [89, 'Cougar Audífonos Gamer Phontum Essential, Alámbrico, 1.9 Metros, 3.5mm, Negro.', 859, 'audifonos', 4],
    [90, 'Energy Sistem Audífonos con Micrófono Headphones 1, Bluetooh, Inalámbrico, Negro/Grafito', 539, 'audifonos', 1],
    [91, 'Genius GHP-400S Audífonos, Alámbrico, 1.5 Metros, Rosa', 137, 'audifonos', 16],
    [92, 'Getttech Audífonos con Micrófono Sonority, Alámbrico, 1.2 Metros, 3.5mm, Negro/Rosa', 149, 'audifonos', 232],
    [93, 'Ginga Audífonos con Micrófono GI18ADJ01BT-RO, Bluetooth, Alámbrico/Inalámbrico, 3.5mm, Rojo', 160, 'audifonos', 139],
    [94, 'HyperX Audífonos Gamer Cloud Flight para PC/PS4/PS4 Pro, Inalámbrico, USB, 3.5mm, Negro', 2869, 'audifonos', 12],
    [95, 'Iogear Audífonos Gamer GHG601, Alámbrico, 1.2 Metros, 3.5mm, Negro', 999, 'audifonos', 2],
    [96, 'Klip Xtreme Audífonos Blast, Bluetooth, Inalámbrico, Negro/Verde', 769, 'audifonos', 2]
]

lifestore_sales = [
    [1, 1, 5, '24/07/2020', 0],
    [2, 1, 5, '27/07/2020', 0],
    [3, 2, 5, '24/02/2020', 0],
    [4, 2, 5, '22/05/2020', 0],
    [5, 2, 5, '01/01/2020', 0],
    [6, 2, 5, '24/04/2020', 0],
    [7, 2, 4, '31/01/2020', 0],
    [8, 2, 4, '07/02/2020', 0],
    [9, 2, 4, '02/03/2020', 0],
    [10, 2, 4, '07/03/2020', 0],
    [11, 2, 4, '24/03/2020', 0],
    [12, 2, 4, '24/04/2020', 0],
    [13, 2, 4, '02/05/2020', 0],
    [14, 2, 4, '03/06/2020', 0],
    [15, 2, 3, '10/11/2019', 1],
    [16, 3, 5, '21/07/2020', 0],
    [17, 3, 4, '21/07/2020', 0],
    [18, 3, 5, '11/06/2020', 0],
    [19, 3, 5, '11/06/2020', 0],
    [20, 3, 5, '20/05/2020', 0],
    [21, 3, 5, '15/05/2020', 0],
    [22, 3, 5, '02/05/2020', 0],
    [23, 3, 5, '30/04/2020', 0],
    [24, 3, 5, '27/04/2020', 0],
    [25, 3, 4, '22/04/2020', 0],
    [26, 3, 5, '19/04/2020', 0],
    [27, 3, 5, '16/04/2020', 0],
    [28, 3, 3, '14/04/2020', 0],
    [29, 3, 5, '14/04/2020', 0],
    [30, 3, 5, '14/04/2020', 0],
    [31, 3, 5, '13/04/2020', 0],
    [32, 3, 5, '13/04/2020', 0],
    [33, 3, 5, '06/04/2020', 0],
    [34, 3, 5, '02/04/2020', 0],
    [35, 3, 5, '01/04/2020', 0],
    [36, 3, 5, '16/03/2020', 0],
    [37, 3, 5, '11/03/2020', 0],
    [38, 3, 4, '10/03/2020', 0],
    [39, 3, 5, '02/03/2020', 0],
    [40, 3, 5, '27/02/2020', 0],
    [41, 3, 4, '27/02/2020', 0],
    [42, 3, 5, '03/02/2020', 0],
    [43, 3, 5, '31/01/2020', 0],
    [44, 3, 5, '30/01/2020', 0],
    [45, 3, 5, '28/01/2020', 0],
    [46, 3, 5, '25/01/2020', 0],
    [47, 3, 5, '19/01/2020', 0],
    [48, 3, 5, '13/01/2020', 0],
    [49, 3, 5, '11/01/2020', 0],
    [50, 3, 4, '09/01/2020', 0],
    [51, 3, 5, '08/01/2020', 0],
    [52, 3, 4, '06/01/2020', 0],
    [53, 3, 5, '04/01/2020', 0],
    [54, 3, 5, '04/01/2020', 0],
    [55, 3, 5, '03/01/2020', 0],
    [56, 3, 5, '02/01/2020', 0],
    [57, 3, 5, '01/01/2020', 0],
    [58, 4, 4, '19/06/2020', 0],
    [59, 4, 4, '04/06/2020', 0],
    [60, 4, 5, '16/04/2020', 0],
    [61, 4, 4, '07/04/2020', 0],
    [62, 4, 5, '06/04/2020', 0],
    [63, 4, 5, '06/04/2020', 0],
    [64, 4, 5, '30/03/2020', 0],
    [65, 4, 4, '08/03/2020', 0],
    [66, 4, 5, '25/02/2020', 0],
    [67, 4, 3, '29/01/2020', 0],
    [68, 4, 5, '23/01/2020', 0],
    [69, 4, 4, '11/01/2020', 0],
    [70, 4, 5, '09/01/2020', 0],
    [71, 5, 4, '03/07/2020', 0],
    [72, 5, 4, '14/05/2020', 0],
    [73, 5, 4, '05/05/2020', 0],
    [74, 5, 5, '04/05/2020', 0],
    [75, 5, 4, '04/05/2020', 0],
    [76, 5, 5, '03/05/2020', 0],
    [77, 5, 5, '26/04/2020', 0],
    [78, 5, 5, '23/04/2020', 0],
    [79, 5, 5, '17/04/2020', 0],
    [80, 5, 5, '13/04/2020', 0],
    [81, 5, 5, '06/04/2020', 0],
    [82, 5, 5, '26/04/2020', 0],
    [83, 5, 5, '24/03/2020', 0],
    [84, 5, 5, '22/03/2020', 0],
    [85, 5, 4, '10/03/2020', 0],
    [86, 5, 5, '25/02/2020', 0],
    [87, 5, 4, '24/02/2020', 0],
    [88, 5, 5, '15/02/2020', 0],
    [89, 5, 5, '30/01/2020', 0],
    [90, 5, 5, '17/01/2020', 0],
    [91, 6, 5, '05/05/2020', 0],
    [92, 6, 5, '22/03/2020', 0],
    [93, 6, 5, '04/02/2020', 0],
    [94, 7, 5, '25/07/2020', 0],
    [95, 7, 5, '17/06/2020', 0],
    [96, 7, 5, '15/04/2020', 0],
    [97, 7, 5, '03/04/2020', 0],
    [98, 7, 5, '31/03/2020', 0],
    [99, 7, 5, '28/03/2020', 0],
    [100, 7, 5, '22/02/2020', 0],
    [101, 8, 5, '20/04/2020', 0],
    [102, 8, 5, '16/02/2020', 0],
    [103, 8, 5, '27/01/2020', 0],
    [104, 8, 5, '20/01/2020', 0],
    [105, 10, 4, '14/05/2020', 0],
    [106, 11, 5, '30/06/2020', 0],
    [107, 11, 5, '02/04/2020', 0],
    [108, 11, 5, '05/03/2020', 0],
    [109, 12, 5, '05/05/2020', 0],
    [110, 12, 4, '09/04/2020', 0],
    [111, 12, 5, '09/04/2020', 0],
    [112, 12, 5, '02/04/2020', 0],
    [113, 12, 5, '25/03/2020', 0],
    [114, 12, 5, '24/03/2020', 0],
    [115, 12, 5, '06/03/2020', 0],
    [116, 12, 5, '04/03/2020', 0],
    [117, 12, 4, '27/02/2020', 0],
    [118, 13, 4, '17/04/2020', 0],
    [119, 17, 1, '05/09/2020', 1],
    [120, 18, 5, '30/06/2020', 0],
    [121, 18, 4, '14/03/2020', 0],
    [122, 18, 5, '27/02/2020', 0],
    [123, 18, 4, '02/02/2020', 0],
    [124, 18, 4, '01/02/2020', 0],
    [125, 21, 5, '14/04/2020', 0],
    [126, 21, 5, '12/02/2020', 0],
    [127, 22, 5, '20/04/2020', 0],
    [128, 25, 5, '28/03/2020', 0],
    [129, 25, 5, '20/03/2020', 0],
    [130, 28, 5, '30/03/2020', 0],
    [131, 29, 4, '04/05/2020', 0],
    [132, 29, 5, '24/04/2020', 0],
    [133, 29, 4, '24/04/2020', 0],
    [134, 29, 4, '17/04/2020', 0],
    [135, 29, 5, '04/04/2020', 0],
    [136, 29, 5, '09/03/2020', 0],
    [137, 29, 5, '07/03/2020', 0],
    [138, 29, 5, '26/02/2020', 0],
    [139, 29, 5, '09/02/2020', 0],
    [140, 29, 5, '06/02/2020', 0],
    [141, 29, 5, '26/01/2020', 0],
    [142, 29, 4, '25/01/2020', 0],
    [143, 29, 1, '13/01/2020', 1],
    [144, 29, 1, '10/01/2020', 0],
    [145, 31, 1, '02/05/2020', 1],
    [146, 31, 1, '02/05/2020', 1],
    [147, 31, 1, '01/04/2020', 1],
    [148, 31, 4, '20/03/2020', 0],
    [149, 31, 3, '14/03/2020', 0],
    [150, 31, 1, '11/01/2020', 0],
    [151, 33, 5, '20/03/2020', 0],
    [152, 33, 4, '27/02/2020', 0],
    [153, 40, 5, '24/05/2020', 0],
    [154, 42, 5, '27/07/2020', 0],
    [155, 42, 5, '04/05/2020', 0],
    [156, 42, 4, '04/05/2020', 0],
    [157, 42, 4, '04/05/2020', 0],
    [158, 42, 5, '04/05/2020', 0],
    [159, 42, 5, '27/04/2020', 0],
    [160, 42, 5, '26/04/2020', 0],
    [161, 42, 4, '19/04/2020', 0],
    [162, 42, 5, '14/04/2020', 0],
    [163, 42, 5, '09/04/2020', 0],
    [164, 42, 4, '05/04/2020', 0],
    [165, 42, 4, '21/03/2020', 0],
    [166, 42, 5, '09/03/2020', 0],
    [167, 42, 5, '09/03/2020', 0],
    [168, 42, 5, '03/03/2020', 0],
    [169, 42, 4, '23/02/2020', 0],
    [170, 42, 4, '03/02/2020', 0],
    [171, 42, 4, '09/01/2020', 0],
    [172, 44, 5, '16/04/2020', 0],
    [173, 44, 5, '11/04/2020', 0],
    [174, 44, 5, '21/03/2020', 0],
    [175, 44, 4, '02/03/2020', 0],
    [176, 44, 4, '01/03/2020', 0],
    [177, 44, 5, '05/01/2020', 0],
    [178, 45, 1, '11/02/2020', 1],
    [179, 46, 2, '07/03/2020', 1],
    [180, 47, 4, '02/07/2020', 0],
    [181, 47, 5, '10/06/2020', 0],
    [182, 47, 5, '18/04/2020', 0],
    [183, 47, 4, '16/04/2020', 0],
    [184, 47, 5, '08/04/2020', 0],
    [185, 47, 4, '07/04/2020', 0],
    [186, 47, 5, '23/03/2020', 0],
    [187, 47, 5, '10/03/2020', 0],
    [188, 47, 3, '11/02/2020', 0],
    [189, 47, 5, '18/01/2020', 0],
    [190, 47, 5, '17/01/2020', 0],
    [191, 48, 4, '02/08/2020', 0],
    [192, 48, 3, '27/04/2020', 0],
    [193, 48, 5, '25/04/2020', 0],
    [194, 48, 5, '23/04/2020', 0],
    [195, 48, 5, '22/02/2020', 0],
    [196, 48, 5, '10/02/2020', 0],
    [197, 48, 5, '14/01/2020', 0],
    [198, 48, 5, '09/01/2020', 0],
    [199, 48, 5, '09/01/2020', 0],
    [200, 49, 5, '06/04/2020', 0],
    [201, 49, 5, '19/04/2020', 0],
    [202, 49, 5, '22/04/2020', 0],
    [203, 50, 5, '04/05/2020', 0],
    [204, 51, 5, '23/03/2020', 0],
    [205, 51, 4, '04/02/2020', 0],
    [206, 51, 5, '03/01/2020', 0],
    [207, 52, 5, '19/03/2020', 0],
    [208, 52, 5, '02/01/2020', 0],
    [209, 54, 4, '03/08/2020', 0],
    [210, 54, 5, '02/08/2020', 0],
    [211, 54, 5, '04/07/2020', 0],
    [212, 54, 5, '01/07/2020', 0],
    [213, 54, 5, '03/06/2020', 0],
    [214, 54, 5, '23/05/2020', 0],
    [215, 54, 4, '15/05/2020', 0],
    [216, 54, 5, '11/05/2020', 0],
    [217, 54, 5, '08/05/2020', 0],
    [218, 54, 5, '04/05/2020', 0],
    [219, 54, 4, '04/05/2002', 0],
    [220, 54, 5, '04/05/2020', 0],
    [221, 54, 5, '04/05/2020', 0],
    [222, 54, 4, '30/04/2020', 0],
    [223, 54, 4, '24/04/2020', 0],
    [224, 54, 5, '23/04/2020', 0],
    [225, 54, 4, '17/04/2020', 0],
    [226, 54, 5, '15/04/2020', 0],
    [227, 54, 5, '14/04/2020', 0],
    [228, 54, 4, '14/04/2020', 0],
    [229, 54, 5, '13/04/2020', 0],
    [230, 54, 5, '13/04/2020', 0],
    [231, 54, 5, '13/04/2020', 0],
    [232, 54, 5, '09/04/2020', 0],
    [233, 54, 5, '03/04/2020', 0],
    [234, 54, 5, '03/04/2020', 0],
    [235, 54, 5, '30/03/2020', 0],
    [236, 54, 5, '26/03/2020', 0],
    [237, 54, 5, '20/03/2020', 0],
    [238, 54, 2, '19/03/2020', 1],
    [239, 54, 5, '17/03/2020', 0],
    [240, 54, 5, '14/03/2020', 0],
    [241, 54, 5, '13/03/2020', 0],
    [242, 54, 4, '02/03/2020', 0],
    [243, 54, 5, '01/03/2020', 0],
    [244, 54, 5, '25/02/2020', 0],
    [245, 54, 5, '20/02/2020', 0],
    [246, 54, 4, '17/02/2020', 0],
    [247, 54, 5, '14/02/2020', 0],
    [248, 54, 5, '12/02/2020', 0],
    [249, 54, 4, '10/02/2020', 0],
    [250, 54, 5, '07/02/2020', 0],
    [251, 54, 5, '31/01/2020', 0],
    [252, 54, 5, '30/01/2020', 0],
    [253, 54, 5, '29/01/2020', 0],
    [254, 54, 5, '27/01/2020', 0],
    [255, 54, 5, '25/01/2020', 0],
    [256, 54, 5, '23/01/2020', 0],
    [257, 54, 5, '23/01/2020', 0],
    [258, 54, 4, '22/01/2020', 0],
    [259, 57, 5, '05/07/2020', 0],
    [260, 57, 5, '23/05/2020', 0],
    [261, 57, 5, '23/05/2020', 0],
    [262, 57, 5, '01/05/2020', 0],
    [263, 57, 5, '06/04/2020', 0],
    [264, 57, 5, '09/03/2020', 0],
    [265, 57, 5, '25/02/2020', 0],
    [266, 57, 5, '10/02/2020', 0],
    [267, 57, 4, '04/02/2020', 0],
    [268, 57, 5, '04/02/2020', 0],
    [269, 57, 5, '28/01/2020', 0],
    [270, 57, 5, '27/01/2020', 0],
    [271, 57, 4, '22/01/2020', 0],
    [272, 57, 5, '08/01/2020', 0],
    [273, 57, 5, '07/01/2020', 0],
    [274, 60, 5, '17/06/2020', 0],
    [275, 66, 5, '06/05/2020', 0],
    [276, 67, 5, '24/04/2020', 0],
    [277, 74, 4, '12/02/2020', 0],
    [278, 74, 5, '18/02/2020', 0],
    [279, 84, 5, '05/05/2020', 0],
    [280, 85, 5, '05/05/2020', 0],
    [281, 85, 5, '28/04/2020', 0],
    [282, 89, 3, '06/01/2020', 0],
    [283, 94, 4, '10/04/2020', 0]
]

lifestore_searches = [
    [1, 1],
    [2, 1],
    [3, 1],
    [4, 1],
    [5, 1],
    [6, 1],
    [7, 1],
    [8, 1],
    [9, 1],
    [10, 1],
    [11, 2],
    [12, 2],
    [13, 2],
    [14, 2],
    [15, 2],
    [16, 2],
    [17, 2],
    [18, 2],
    [19, 2],
    [20, 2],
    [21, 2],
    [22, 2],
    [23, 2],
    [24, 2],
    [25, 2],
    [26, 2],
    [27, 2],
    [28, 2],
    [29, 2],
    [30, 2],
    [31, 2],
    [32, 2],
    [33, 2],
    [34, 2],
    [35, 3],
    [36, 3],
    [37, 3],
    [38, 3],
    [39, 3],
    [40, 3],
    [41, 3],
    [42, 3],
    [43, 3],
    [44, 3],
    [45, 3],
    [46, 3],
    [47, 3],
    [48, 3],
    [49, 3],
    [50, 3],
    [51, 3],
    [52, 3],
    [53, 3],
    [54, 3],
    [55, 3],
    [56, 3],
    [57, 3],
    [58, 3],
    [59, 3],
    [60, 3],
    [61, 3],
    [62, 3],
    [63, 3],
    [64, 3],
    [65, 3],
    [66, 3],
    [67, 3],
    [68, 3],
    [69, 3],
    [70, 3],
    [71, 3],
    [72, 3],
    [73, 3],
    [74, 3],
    [75, 3],
    [76, 3],
    [77, 3],
    [78, 3],
    [79, 3],
    [80, 3],
    [81, 3],
    [82, 3],
    [83, 3],
    [84, 3],
    [85, 3],
    [86, 3],
    [87, 3],
    [88, 3],
    [89, 3],
    [90, 4],
    [91, 4],
    [92, 4],
    [93, 4],
    [94, 4],
    [95, 4],
    [96, 4],
    [97, 4],
    [98, 4],
    [99, 4],
    [100, 4],
    [101, 4],
    [102, 4],
    [103, 4],
    [104, 4],
    [105, 4],
    [106, 4],
    [107, 4],
    [108, 4],
    [109, 4],
    [110, 4],
    [111, 4],
    [112, 4],
    [113, 4],
    [114, 4],
    [115, 4],
    [116, 4],
    [117, 4],
    [118, 4],
    [119, 4],
    [120, 4],
    [121, 4],
    [122, 4],
    [123, 4],
    [124, 4],
    [125, 4],
    [126, 4],
    [127, 4],
    [128, 4],
    [129, 4],
    [130, 4],
    [131, 5],
    [132, 5],
    [133, 5],
    [134, 5],
    [135, 5],
    [136, 5],
    [137, 5],
    [138, 5],
    [139, 5],
    [140, 5],
    [141, 5],
    [142, 5],
    [143, 5],
    [144, 5],
    [145, 5],
    [146, 5],
    [147, 5],
    [148, 5],
    [149, 5],
    [150, 5],
    [151, 5],
    [152, 5],
    [153, 5],
    [154, 5],
    [155, 5],
    [156, 5],
    [157, 5],
    [158, 5],
    [159, 5],
    [160, 5],
    [161, 6],
    [162, 6],
    [163, 6],
    [164, 6],
    [165, 6],
    [166, 6],
    [167, 6],
    [168, 6],
    [169, 6],
    [170, 6],
    [171, 7],
    [172, 7],
    [173, 7],
    [174, 7],
    [175, 7],
    [176, 7],
    [177, 7],
    [178, 7],
    [179, 7],
    [180, 7],
    [181, 7],
    [182, 7],
    [183, 7],
    [184, 7],
    [185, 7],
    [186, 7],
    [187, 7],
    [188, 7],
    [189, 7],
    [190, 7],
    [191, 7],
    [192, 7],
    [193, 7],
    [194, 7],
    [195, 7],
    [196, 7],
    [197, 7],
    [198, 7],
    [199, 7],
    [200, 7],
    [201, 7],
    [202, 8],
    [203, 8],
    [204, 8],
    [205, 8],
    [206, 8],
    [207, 8],
    [208, 8],
    [209, 8],
    [210, 8],
    [211, 8],
    [212, 8],
    [213, 8],
    [214, 8],
    [215, 8],
    [216, 8],
    [217, 8],
    [218, 8],
    [219, 8],
    [220, 8],
    [221, 8],
    [222, 9],
    [223, 10],
    [224, 11],
    [225, 11],
    [226, 11],
    [227, 11],
    [228, 11],
    [229, 12],
    [230, 12],
    [231, 12],
    [232, 12],
    [233, 12],
    [234, 12],
    [235, 12],
    [236, 12],
    [237, 12],
    [238, 12],
    [239, 12],
    [240, 12],
    [241, 12],
    [242, 12],
    [243, 12],
    [244, 13],
    [245, 13],
    [246, 15],
    [247, 15],
    [248, 15],
    [249, 15],
    [250, 17],
    [251, 17],
    [252, 17],
    [253, 18],
    [254, 18],
    [255, 18],
    [256, 18],
    [257, 18],
    [258, 18],
    [259, 18],
    [260, 18],
    [261, 18],
    [262, 18],
    [263, 18],
    [264, 21],
    [265, 21],
    [266, 21],
    [267, 21],
    [268, 21],
    [269, 21],
    [270, 21],
    [271, 21],
    [272, 21],
    [273, 21],
    [274, 21],
    [275, 21],
    [276, 21],
    [277, 21],
    [278, 21],
    [279, 22],
    [280, 22],
    [281, 22],
    [282, 22],
    [283, 22],
    [284, 25],
    [285, 25],
    [286, 25],
    [287, 25],
    [288, 25],
    [289, 25],
    [290, 25],
    [291, 25],
    [292, 25],
    [293, 25],
    [294, 26],
    [295, 26],
    [296, 26],
    [297, 26],
    [298, 26],
    [299, 27],
    [300, 28],
    [301, 28],
    [302, 28],
    [303, 28],
    [304, 28],
    [305, 29],
    [306, 29],
    [307, 29],
    [308, 29],
    [309, 29],
    [310, 29],
    [311, 29],
    [312, 29],
    [313, 29],
    [314, 29],
    [315, 29],
    [316, 29],
    [317, 29],
    [318, 29],
    [319, 29],
    [320, 29],
    [321, 29],
    [322, 29],
    [323, 29],
    [324, 29],
    [325, 29],
    [326, 29],
    [327, 29],
    [328, 29],
    [329, 29],
    [330, 29],
    [331, 29],
    [332, 29],
    [333, 29],
    [334, 29],
    [335, 29],
    [336, 29],
    [337, 29],
    [338, 29],
    [339, 29],
    [340, 29],
    [341, 29],
    [342, 29],
    [343, 29],
    [344, 29],
    [345, 29],
    [346, 29],
    [347, 29],
    [348, 29],
    [349, 29],
    [350, 29],
    [351, 29],
    [352, 29],
    [353, 29],
    [354, 29],
    [355, 29],
    [356, 29],
    [357, 29],
    [358, 29],
    [359, 29],
    [360, 29],
    [361, 29],
    [362, 29],
    [363, 29],
    [364, 29],
    [365, 31],
    [366, 31],
    [367, 31],
    [368, 31],
    [369, 31],
    [370, 31],
    [371, 31],
    [372, 31],
    [373, 31],
    [374, 31],
    [375, 35],
    [376, 39],
    [377, 39],
    [378, 39],
    [379, 40],
    [380, 40],
    [381, 40],
    [382, 40],
    [383, 40],
    [384, 40],
    [385, 40],
    [386, 40],
    [387, 40],
    [388, 40],
    [389, 42],
    [390, 42],
    [391, 42],
    [392, 42],
    [393, 42],
    [394, 42],
    [395, 42],
    [396, 42],
    [397, 42],
    [398, 42],
    [399, 42],
    [400, 42],
    [401, 42],
    [402, 42],
    [403, 42],
    [404, 42],
    [405, 42],
    [406, 42],
    [407, 42],
    [408, 42],
    [409, 42],
    [410, 42],
    [411, 42],
    [412, 44],
    [413, 44],
    [414, 44],
    [415, 44],
    [416, 44],
    [417, 44],
    [418, 44],
    [419, 44],
    [420, 44],
    [421, 44],
    [422, 44],
    [423, 44],
    [424, 44],
    [425, 44],
    [426, 44],
    [427, 44],
    [428, 44],
    [429, 44],
    [430, 44],
    [431, 44],
    [432, 44],
    [433, 44],
    [434, 44],
    [435, 44],
    [436, 44],
    [437, 45],
    [438, 46],
    [439, 46],
    [440, 46],
    [441, 46],
    [442, 47],
    [443, 47],
    [444, 47],
    [445, 47],
    [446, 47],
    [447, 47],
    [448, 47],
    [449, 47],
    [450, 47],
    [451, 47],
    [452, 47],
    [453, 47],
    [454, 47],
    [455, 47],
    [456, 47],
    [457, 47],
    [458, 47],
    [459, 47],
    [460, 47],
    [461, 47],
    [462, 47],
    [463, 47],
    [464, 47],
    [465, 47],
    [466, 47],
    [467, 47],
    [468, 47],
    [469, 47],
    [470, 47],
    [471, 47],
    [472, 48],
    [473, 48],
    [474, 48],
    [475, 48],
    [476, 48],
    [477, 48],
    [478, 48],
    [479, 48],
    [480, 48],
    [481, 48],
    [482, 48],
    [483, 48],
    [484, 48],
    [485, 48],
    [486, 48],
    [487, 48],
    [488, 48],
    [489, 48],
    [490, 48],
    [491, 48],
    [492, 48],
    [493, 48],
    [494, 48],
    [495, 48],
    [496, 48],
    [497, 48],
    [498, 48],
    [499, 49],
    [500, 49],
    [501, 49],
    [502, 49],
    [503, 49],
    [504, 49],
    [505, 49],
    [506, 49],
    [507, 49],
    [508, 49],
    [509, 50],
    [510, 50],
    [511, 50],
    [512, 50],
    [513, 50],
    [514, 50],
    [515, 50],
    [516, 51],
    [517, 51],
    [518, 51],
    [519, 51],
    [520, 51],
    [521, 51],
    [522, 51],
    [523, 51],
    [524, 51],
    [525, 51],
    [526, 51],
    [527, 52],
    [528, 52],
    [529, 52],
    [530, 52],
    [531, 52],
    [532, 54],
    [533, 54],
    [534, 54],
    [535, 54],
    [536, 54],
    [537, 54],
    [538, 54],
    [539, 54],
    [540, 54],
    [541, 54],
    [542, 54],
    [543, 54],
    [544, 54],
    [545, 54],
    [546, 54],
    [547, 54],
    [548, 54],
    [549, 54],
    [550, 54],
    [551, 54],
    [552, 54],
    [553, 54],
    [554, 54],
    [555, 54],
    [556, 54],
    [557, 54],
    [558, 54],
    [559, 54],
    [560, 54],
    [561, 54],
    [562, 54],
    [563, 54],
    [564, 54],
    [565, 54],
    [566, 54],
    [567, 54],
    [568, 54],
    [569, 54],
    [570, 54],
    [571, 54],
    [572, 54],
    [573, 54],
    [574, 54],
    [575, 54],
    [576, 54],
    [577, 54],
    [578, 54],
    [579, 54],
    [580, 54],
    [581, 54],
    [582, 54],
    [583, 54],
    [584, 54],
    [585, 54],
    [586, 54],
    [587, 54],
    [588, 54],
    [589, 54],
    [590, 54],
    [591, 54],
    [592, 54],
    [593, 54],
    [594, 54],
    [595, 54],
    [596, 54],
    [597, 54],
    [598, 54],
    [599, 54],
    [600, 54],
    [601, 54],
    [602, 54],
    [603, 54],
    [604, 54],
    [605, 54],
    [606, 54],
    [607, 54],
    [608, 54],
    [609, 54],
    [610, 54],
    [611, 54],
    [612, 54],
    [613, 54],
    [614, 54],
    [615, 54],
    [616, 54],
    [617, 54],
    [618, 54],
    [619, 54],
    [620, 54],
    [621, 54],
    [622, 54],
    [623, 54],
    [624, 54],
    [625, 54],
    [626, 54],
    [627, 54],
    [628, 54],
    [629, 54],
    [630, 54],
    [631, 54],
    [632, 54],
    [633, 54],
    [634, 54],
    [635, 54],
    [636, 54],
    [637, 54],
    [638, 54],
    [639, 54],
    [640, 54],
    [641, 54],
    [642, 54],
    [643, 54],
    [644, 54],
    [645, 54],
    [646, 54],
    [647, 54],
    [648, 54],
    [649, 54],
    [650, 54],
    [651, 54],
    [652, 54],
    [653, 54],
    [654, 54],
    [655, 54],
    [656, 54],
    [657, 54],
    [658, 54],
    [659, 54],
    [660, 54],
    [661, 54],
    [662, 54],
    [663, 54],
    [664, 54],
    [665, 54],
    [666, 54],
    [667, 54],
    [668, 54],
    [669, 54],
    [670, 54],
    [671, 54],
    [672, 54],
    [673, 54],
    [674, 54],
    [675, 54],
    [676, 54],
    [677, 54],
    [678, 54],
    [679, 54],
    [680, 54],
    [681, 54],
    [682, 54],
    [683, 54],
    [684, 54],
    [685, 54],
    [686, 54],
    [687, 54],
    [688, 54],
    [689, 54],
    [690, 54],
    [691, 54],
    [692, 54],
    [693, 54],
    [694, 54],
    [695, 54],
    [696, 54],
    [697, 54],
    [698, 54],
    [699, 54],
    [700, 54],
    [701, 54],
    [702, 54],
    [703, 54],
    [704, 54],
    [705, 54],
    [706, 54],
    [707, 54],
    [708, 54],
    [709, 54],
    [710, 54],
    [711, 54],
    [712, 54],
    [713, 54],
    [714, 54],
    [715, 54],
    [716, 54],
    [717, 54],
    [718, 54],
    [719, 54],
    [720, 54],
    [721, 54],
    [722, 54],
    [723, 54],
    [724, 54],
    [725, 54],
    [726, 54],
    [727, 54],
    [728, 54],
    [729, 54],
    [730, 54],
    [731, 54],
    [732, 54],
    [733, 54],
    [734, 54],
    [735, 54],
    [736, 54],
    [737, 54],
    [738, 54],
    [739, 54],
    [740, 54],
    [741, 54],
    [742, 54],
    [743, 54],
    [744, 54],
    [745, 54],
    [746, 54],
    [747, 54],
    [748, 54],
    [749, 54],
    [750, 54],
    [751, 54],
    [752, 54],
    [753, 54],
    [754, 54],
    [755, 54],
    [756, 54],
    [757, 54],
    [758, 54],
    [759, 54],
    [760, 54],
    [761, 54],
    [762, 54],
    [763, 54],
    [764, 54],
    [765, 54],
    [766, 54],
    [767, 54],
    [768, 54],
    [769, 54],
    [770, 54],
    [771, 54],
    [772, 54],
    [773, 54],
    [774, 54],
    [775, 54],
    [776, 54],
    [777, 54],
    [778, 54],
    [779, 54],
    [780, 54],
    [781, 54],
    [782, 54],
    [783, 54],
    [784, 54],
    [785, 54],
    [786, 54],
    [787, 54],
    [788, 54],
    [789, 54],
    [790, 54],
    [791, 54],
    [792, 54],
    [793, 54],
    [794, 54],
    [795, 56],
    [796, 56],
    [797, 57],
    [798, 57],
    [799, 57],
    [800, 57],
    [801, 57],
    [802, 57],
    [803, 57],
    [804, 57],
    [805, 57],
    [806, 57],
    [807, 57],
    [808, 57],
    [809, 57],
    [810, 57],
    [811, 57],
    [812, 57],
    [813, 57],
    [814, 57],
    [815, 57],
    [816, 57],
    [817, 57],
    [818, 57],
    [819, 57],
    [820, 57],
    [821, 57],
    [822, 57],
    [823, 57],
    [824, 57],
    [825, 57],
    [826, 57],
    [827, 57],
    [828, 57],
    [829, 57],
    [830, 57],
    [831, 57],
    [832, 57],
    [833, 57],
    [834, 57],
    [835, 57],
    [836, 57],
    [837, 57],
    [838, 57],
    [839, 57],
    [840, 57],
    [841, 57],
    [842, 57],
    [843, 57],
    [844, 57],
    [845, 57],
    [846, 57],
    [847, 57],
    [848, 57],
    [849, 57],
    [850, 57],
    [851, 57],
    [852, 57],
    [853, 57],
    [854, 57],
    [855, 57],
    [856, 57],
    [857, 57],
    [858, 57],
    [859, 57],
    [860, 57],
    [861, 57],
    [862, 57],
    [863, 57],
    [864, 57],
    [865, 57],
    [866, 57],
    [867, 57],
    [868, 57],
    [869, 57],
    [870, 57],
    [871, 57],
    [872, 57],
    [873, 57],
    [874, 57],
    [875, 57],
    [876, 57],
    [877, 57],
    [878, 57],
    [879, 57],
    [880, 57],
    [881, 57],
    [882, 57],
    [883, 57],
    [884, 57],
    [885, 57],
    [886, 57],
    [887, 57],
    [888, 57],
    [889, 57],
    [890, 57],
    [891, 57],
    [892, 57],
    [893, 57],
    [894, 57],
    [895, 57],
    [896, 57],
    [897, 57],
    [898, 57],
    [899, 57],
    [900, 57],
    [901, 57],
    [902, 57],
    [903, 57],
    [904, 59],
    [905, 63],
    [906, 63],
    [907, 63],
    [908, 63],
    [909, 66],
    [910, 66],
    [911, 66],
    [912, 66],
    [913, 66],
    [914, 66],
    [915, 66],
    [916, 66],
    [917, 66],
    [918, 66],
    [919, 66],
    [920, 66],
    [921, 66],
    [922, 66],
    [923, 66],
    [924, 67],
    [925, 67],
    [926, 67],
    [927, 67],
    [928, 67],
    [929, 67],
    [930, 67],
    [931, 67],
    [932, 67],
    [933, 67],
    [934, 67],
    [935, 67],
    [936, 67],
    [937, 67],
    [938, 67],
    [939, 67],
    [940, 67],
    [941, 67],
    [942, 67],
    [943, 67],
    [944, 67],
    [945, 67],
    [946, 67],
    [947, 67],
    [948, 67],
    [949, 67],
    [950, 67],
    [951, 67],
    [952, 67],
    [953, 67],
    [954, 67],
    [955, 67],
    [956, 70],
    [957, 73],
    [958, 73],
    [959, 73],
    [960, 73],
    [961, 74],
    [962, 74],
    [963, 74],
    [964, 74],
    [965, 74],
    [966, 74],
    [967, 76],
    [968, 76],
    [969, 80],
    [970, 84],
    [971, 84],
    [972, 84],
    [973, 84],
    [974, 84],
    [975, 84],
    [976, 84],
    [977, 84],
    [978, 84],
    [979, 84],
    [980, 85],
    [981, 85],
    [982, 85],
    [983, 85],
    [984, 85],
    [985, 85],
    [986, 85],
    [987, 85],
    [988, 85],
    [989, 85],
    [990, 85],
    [991, 85],
    [992, 85],
    [993, 85],
    [994, 85],
    [995, 85],
    [996, 85],
    [997, 85],
    [998, 85],
    [999, 85],
    [1000, 85],
    [1001, 85],
    [1002, 85],
    [1003, 85],
    [1004, 85],
    [1005, 85],
    [1006, 85],
    [1007, 85],
    [1008, 85],
    [1009, 85],
    [1010, 85],
    [1011, 85],
    [1012, 85],
    [1013, 85],
    [1014, 85],
    [1015, 89],
    [1016, 89],
    [1017, 89],
    [1018, 89],
    [1019, 89],
    [1020, 89],
    [1021, 89],
    [1022, 91],
    [1023, 91],
    [1024, 93],
    [1025, 94],
    [1026, 94],
    [1027, 94],
    [1028, 94],
    [1029, 94],
    [1030, 94],
    [1031, 95],
    [1032, 95],
    [1033, 95]
]

#FIN DE DATOS

#login users
lista_admins = [["root", "root"], ["sa", "sasa"]]

usuario = input("Ingresa el usuario: ")
password = input("Ingresa la contraseña: ")

es_admin = 0
intentos = 0

while es_admin != 1 and intentos < 2:
    for admin in lista_admins:

        if admin[0] == usuario and admin[1] == password:
            es_admin = 1

    if es_admin == 0:
        print("Datos incorrectos")
        usuario = input("Ingresa nuevamente el usuario: ")
        password = input("Ingresa nuevamente la contraseña: ")
        intentos += 1

## OPERACIONES A REALIZAR PARA ANÁLIS
if es_admin == 1:
    print(" Usuario autentificado ")

    # lista de Productos con mayores ventas
    listProductSales = []

    # recorrido de todos los productos y agregarlos a la lista de productos
    for p in lifestore_sales:
        listProductSales.append(p[1])

    # declaracion de  los productos, para saber cuantos hay de cada uno vendidos

    p1 = p2 = p3 = p4 = p5 = p6 = p7 = p8 = p9 = p10 = p11 = p12 = p13 = p14 = p15 = p16 = p17 = p18 = p19 = p20 = p21 = p22 = p23 = p24 = p25 = p26 = p27 = p28 = p29 = p30 = p31 = p32 = p33 = p34 = p35 = p36 = p37 = p38 = p39 = p40 = p41 = p42 = p43 = p44 = p45 = p46 = p47 = p48 = p49 = p50 = p51 = p52 = p53 = p54 = p55 = p56 = p57 = p58 = p59 = p60 = p61 = p62 = p63 = p64 = p65 = p66 = p67 = p68 = p69 = p70 = p71 = p72 = p73 = p74 = p75 = p76 = p77 = p78 = p79 = p80 = p81 = p82 = p83 = p84 = p85 = p86 = p87 = p88 = p89 = p90 = p91 = p92 = p93 = p94 = p95 = p96 = p97 = p98 = p99 = p100 = p101 = 0

    # se obtendra el numero de cada producto vendido [id_producto, numero de elementos vendidos ]
    for p in listProductSales:
        if p == 1:
            p1 += 1
            listCountProduct.update({1: p1})

        elif p == 2:
            p2 += 1
            listCountProduct.update({2: p2})

        elif p == 3:
            p3 += 1
            listCountProduct.update({3: p3})
        elif p == 4:
            p4 += 1
            listCountProduct.update({4: p4})
        elif p == 5:
            p5 += 1
            listCountProduct.update({5: p5})
        elif p == 6:
            p6 += 1
            listCountProduct.update({6: p6})
        elif p == 7:
            p7 += 1
            listCountProduct.update({7: p7})

        elif p == 8:
            p8 += 1
            listCountProduct.update({8: p8})
        elif p == 9:
            p9 += 1
            listCountProduct.update({9: p9})
        elif p == 10:
            p10 += 1
            listCountProduct.update({10: p10})
        elif p == 11:
            p11 += 1
            listCountProduct.update({11: p11})
        elif p == 12:
            p12 += 1
            listCountProduct.update({12: p12})
        elif p == 13:
            p13 += 1
            listCountProduct.update({13: p13})
        elif p == 14:
            p14 += 1
            listCountProduct.update({14: p14})
        elif p == 15:
            p15 += 1
            listCountProduct.update({15: p15})
        elif p == 16:
            p16 += 1
            listCountProduct.update({16: p16})
        elif p == 17:
            p17 += 1
            listCountProduct.update({17: p17})
        elif p == 18:
            p18 += 1
            listCountProduct.update({18: p18})
        elif p == 19:
            p19 += 1
            listCountProduct.update({19: p19})
        elif p == 20:
            p20 += 1
            listCountProduct.update({20: p20})
        # -----
        elif p == 21:
            p21 += 1
            listCountProduct.update({21: p21})
        elif p == 22:

            p22 += 1
            listCountProduct.update({22: p22})
        elif p == 23:
            p23 += 1
            listCountProduct.update({23: p23})
        elif p == 24:
            p24 += 1
            listCountProduct.update({24: p24})
        elif p == 25:
            p25 += 1
            listCountProduct.update({25: p25})
        elif p == 26:
            p26 += 1
            listCountProduct.update({26: p26})
        elif p == 27:
            p27 += 1
            listCountProduct.update({27: p27})
        elif p == 28:
            p28 += 1
            listCountProduct.update({28: p28})
        elif p == 29:
            p29 += 1
            listCountProduct.update({29: p29})
        elif p == 30:
            p30 += 1
            listCountProduct.update({30: p30})
        elif p == 31:
            p31 += 1
            listCountProduct.update({31: p31})
        elif p == 32:
            p32 += 1
            listCountProduct.update({32: p32})
        elif p == 33:
            p33 += 1
            listCountProduct.update({33: p33})
        elif p == 34:
            p34 += 1
            listCountProduct.update({34: p34})
        elif p == 35:
            p35 += 1
            listCountProduct.update({35: p35})
        elif p == 36:
            p36 += 1
            listCountProduct.update({36: p36})
        elif p == 37:
            p37 += 1
            listCountProduct.update({37: p37})
        elif p == 38:
            p38 += 1
            listCountProduct.update({38: p38})
        elif p == 39:
            p39 += 1
            listCountProduct.update({39: p39})
        elif p == 40:
            p40 += 1
            listCountProduct.update({40: p40})
        # -----
        elif p == 41:
            p41 += 1
            listCountProduct.update({41: p10})
        elif p == 42:
            p42 += 1
            listCountProduct.update({42: p42})
        elif p == 43:
            p43 += 1
            listCountProduct.update({43: p43})
        elif p == 44:
            p44 += 1
            listCountProduct.update({44: p44})
        elif p == 45:
            p45 += 1
            listCountProduct.update({45: p45})
        elif p == 46:
            p46 += 1
            listCountProduct.update({46: p46})
        elif p == 47:
            p47 += 1
            listCountProduct.update({47: p47})
        elif p == 48:
            p48 += 1
            listCountProduct.update({48: p48})
        elif p == 49:
            p49 += 1
            listCountProduct.update({49: p49})
        elif p == 50:
            p50 += 1
            listCountProduct.update({50: p50})
        elif p == 51:
            p51 += 1
            listCountProduct.update({51: p51})
        elif p == 52:
            p52 += 1
            listCountProduct.update({52: p52})
        elif p == 53:
            p53 += 1
            listCountProduct.update({53: p53})
        elif p == 54:
            p54 += 1
            listCountProduct.update({54: p54})
        elif p == 55:
            p55 += 1
            listCountProduct.update({55: p55})
        elif p == 56:
            p56 += 1
            listCountProduct.update({56: p56})
        elif p == 57:
            p57 += 1
            listCountProduct.update({57: p57})
        elif p == 58:
            p58 += 1
            listCountProduct.update({58: p58})
        elif p == 59:
            p59 += 1
            listCountProduct.update({59: p59})
        elif p == 60:
            p60 += 1
            listCountProduct.update({60: p60})
        # -----
        elif p == 61:
            p61 += 1
            listCountProduct.update({61: p61})
        elif p == 62:
            p62 += 1
            listCountProduct.update({62: p62})
        elif p == 63:
            p63 += 1
            listCountProduct.update({63: p63})
        elif p == 64:
            p64 += 1
            listCountProduct.update({64: p64})
        elif p == 65:
            p65 += 1
            listCountProduct.update({65: p65})
        elif p == 66:
            p66 += 1
            listCountProduct.update({66: p66})
        elif p == 67:
            p67 += 1
            listCountProduct.update({67: p67})
        elif p == 68:
            p68 += 1
            listCountProduct.update({68: p68})
        elif p == 69:
            p69 += 1
            listCountProduct.update({69: p69})
        elif p == 70:
            p70 += 1
            listCountProduct.update({70: p70})
        elif p == 71:
            p71 += 1
            listCountProduct.update({71: p71})
        elif p == 72:
            p72 += 1
            listCountProduct.update({72: p72})
        elif p == 73:
            p73 += 1
            listCountProduct.update({73: p73})
        elif p == 74:
            p74 += 1
            listCountProduct.update({74: p74})
        elif p == 75:
            p75 += 1
            listCountProduct.update({75: p75})
        elif p == 76:
            p76 += 1
            listCountProduct.update({76: p76})
        elif p == 77:
            p77 += 1
            listCountProduct.update({77: p77})
        elif p == 78:
            p78 += 1
            listCountProduct.update({78: p78})
        elif p == 79:
            p79 += 1
            listCountProduct.update({79: p79})
        elif p == 80:
            p80 += 1
            listCountProduct.update({80: p80})
        # -----
        elif p == 81:
            p81 += 1
            listCountProduct.update({81: p81})
        elif p == 82:
            p82 += 1
            listCountProduct.update({82: p82})
        elif p == 83:
            p83 += 1
            listCountProduct.update({83: p83})
        elif p == 84:
            p84 += 1
            listCountProduct.update({84: p84})
        elif p == 85:
            p85 += 1
            listCountProduct.update({85: p85})
        elif p == 86:
            p86 += 1
            listCountProduct.update({86: p86})
        elif p == 87:
            p87 += 1
            listCountProduct.update({87: p87})
        elif p == 88:
            p88 += 1
            listCountProduct.update({88: p88})
        elif p == 89:
            p89 += 1
            listCountProduct.update({89: p89})
        elif p == 90:
            p90 += 1
            listCountProduct.update({90: p90})
        elif p == 91:
            p91 += 1
            listCountProduct.update({91: p91})
        elif p == 92:
            p92 += 1
            listCountProduct.update({92: p92})
        elif p == 93:
            p93 += 1
            listCountProduct.update({93: p93})
        elif p == 94:
            p94 += 1
            listCountProduct.update({94: p94})
        elif p == 95:
            p95 += 1
            listCountProduct.update({95: p95})
        elif p == 96:
            p96 += 1
            listCountProduct.update({96: p96})
        elif p == 97:
            p97 += 1
            listCountProduct.update({97: p97})
        elif p == 98:
            p98 += 1
            listCountProduct.update({98: p98})
        elif p == 99:
            p99 += 1
            listCountProduct.update({99: p99})
        elif p == 100:
            p100 += 1
            listCountProduct.update({100: p100})
        else:
            p101 += 1
            listCountProduct.update({101: p101})

    # ordenamiento de productos por numero de elementos vendidos

    products_sort = sorted(listCountProduct.items(), key=operator.itemgetter(1), reverse=True)
    products_sort2 = sorted(listCountProduct.items(), key=operator.itemgetter(1), reverse=False)

    # -- MAYORES VENTAS
    valor = 0
    listProduct = []
    for name in enumerate(products_sort):
        valor = name[1][0]
        for n in lifestore_products:
            if n[0] == valor:
                venta = 0
                venta = name[1][1] * n[2]
                print("NUMERO DE ELEMENTOS VENDIDOS: ", name[1][1], "- DESCRIPCION DE PRODUCTO: ", n[1], "TOTAL: $",
                      venta, " ID:", n[0])
                listProduct.append(Products(n[0], n[1], name[1][1], n[3], venta))

    # -- MENORES VENTAS
    print(
        "-----------------------------------------Productos Ordenados por  Menores ventas ------------------------------------------")
    valor = 0

    for name in enumerate(products_sort2):
        valor = name[1][0]
        for n in lifestore_products:
            if n[0] == valor:
                venta = 0
                venta = name[1][1] * n[2]
                print("NUMERO DE ELEMENTOS VENDIDOS: ", name[1][1], "- DESCRIPCION DE PRODUCTO: ", n[1], "TOTAL: $",
                      venta,
                      " ID:", n[0])
                listProduct.append(Products(n[0], n[1], name[1][1], n[3], venta))

    # --------------------------------------------------- BUSQUEDA DE PRODUCTOS -----------------------------------------------

    listCategory_Procesador = {}
    listCountProductSearch = {}
    listCountProductSearch2 = {}
    listProductSearchs = []
    # recorrido de todos los productos y agregarlos a la lista de productos

    for p in lifestore_searches:
        listProductSearchs.append(p[1])

    # declaracion de  los productos, para saber cuantos hay de cada uno vendidos

    p1 = p2 = p3 = p4 = p5 = p6 = p7 = p8 = p9 = p10 = p11 = p12 = p13 = p14 = p15 = p16 = p17 = p18 = p19 = p20 = p21 = p22 = p23 = p24 = p25 = p26 = p27 = p28 = p29 = p30 = p31 = p32 = p33 = p34 = p35 = p36 = p37 = p38 = p39 = p40 = p41 = p42 = p43 = p44 = p45 = p46 = p47 = p48 = p49 = p50 = p51 = p52 = p53 = p54 = p55 = p56 = p57 = p58 = p59 = p60 = p61 = p62 = p63 = p64 = p65 = p66 = p67 = p68 = p69 = p70 = p71 = p72 = p73 = p74 = p75 = p76 = p77 = p78 = p79 = p80 = p81 = p82 = p83 = p84 = p85 = p86 = p87 = p88 = p89 = p90 = p91 = p92 = p93 = p94 = p95 = p96 = p97 = p98 = p99 = p100 = p101 = 0

    for p in listProductSearchs:
        if p == 1:
            p1 += 1
            listCountProductSearch.update({1: p1})

        elif p == 2:
            p2 += 1
            listCountProductSearch.update({2: p2})

        elif p == 3:
            p3 += 1
            listCountProductSearch.update({3: p3})
        elif p == 4:
            p4 += 1
            listCountProductSearch.update({4: p4})
        elif p == 5:
            p5 += 1
            listCountProductSearch.update({5: p5})
        elif p == 6:
            p6 += 1
            listCountProductSearch.update({6: p6})
        elif p == 7:
            p7 += 1
            listCountProductSearch.update({7: p7})

        elif p == 8:
            p8 += 1
            listCountProductSearch.update({8: p8})
        elif p == 9:
            p9 += 1
            listCountProductSearch.update({9: p9})
        elif p == 10:
            p10 += 1
            listCountProductSearch.update({10: p10})
        elif p == 11:
            p11 += 1
            listCountProductSearch.update({11: p11})
        elif p == 12:
            p12 += 1
            listCountProductSearch.update({12: p12})
        elif p == 13:
            p13 += 1
            listCountProductSearch.update({13: p13})
        elif p == 14:
            p14 += 1
            listCountProductSearch.update({14: p14})
        elif p == 15:
            p15 += 1
            listCountProductSearch.update({15: p15})
        elif p == 16:
            p16 += 1
            listCountProductSearch.update({16: p16})
        elif p == 17:
            p17 += 1
            listCountProductSearch.update({17: p17})
        elif p == 18:
            p18 += 1
            listCountProductSearch.update({18: p18})
        elif p == 19:
            p19 += 1
            listCountProductSearch.update({19: p19})
        elif p == 20:
            p20 += 1
            listCountProductSearch.update({20: p20})
        # -----
        elif p == 21:
            p21 += 1
            listCountProductSearch.update({21: p21})
        elif p == 22:

            p22 += 1
            listCountProductSearch.update({22: p22})
        elif p == 23:
            p23 += 1
            listCountProductSearch.update({23: p23})
        elif p == 24:
            p24 += 1
            listCountProductSearch.update({24: p24})
        elif p == 25:
            p25 += 1
            listCountProductSearch.update({25: p25})
        elif p == 26:
            p26 += 1
            listCountProductSearch.update({26: p26})
        elif p == 27:
            p27 += 1
            listCountProductSearch.update({27: p27})
        elif p == 28:
            p28 += 1
            listCountProductSearch.update({28: p28})
        elif p == 29:
            p29 += 1
            listCountProductSearch.update({29: p29})
        elif p == 30:
            p30 += 1
            listCountProductSearch.update({30: p30})
        elif p == 31:
            p31 += 1
            listCountProductSearch.update({31: p31})
        elif p == 32:
            p32 += 1
            listCountProductSearch.update({32: p32})
        elif p == 33:
            p33 += 1
            listCountProductSearch.update({33: p33})
        elif p == 34:
            p34 += 1
            listCountProductSearch.update({34: p34})
        elif p == 35:
            p35 += 1
            listCountProductSearch.update({35: p35})
        elif p == 36:
            p36 += 1
            listCountProductSearch.update({36: p36})
        elif p == 37:
            p37 += 1
            listCountProductSearch.update({37: p37})
        elif p == 38:
            p38 += 1
            listCountProductSearch.update({38: p38})
        elif p == 39:
            p39 += 1
            listCountProductSearch.update({39: p39})
        elif p == 40:
            p40 += 1
            listCountProductSearch.update({40: p40})
        # -----
        elif p == 41:
            p41 += 1
            listCountProductSearch.update({41: p10})
        elif p == 42:
            p42 += 1
            listCountProductSearch.update({42: p42})
        elif p == 43:
            p43 += 1
            listCountProductSearch.update({43: p43})
        elif p == 44:
            p44 += 1
            listCountProductSearch.update({44: p44})
        elif p == 45:
            p45 += 1
            listCountProductSearch.update({45: p45})
        elif p == 46:
            p46 += 1
            listCountProductSearch.update({46: p46})
        elif p == 47:
            p47 += 1
            listCountProductSearch.update({47: p47})
        elif p == 48:
            p48 += 1
            listCountProductSearch.update({48: p48})
        elif p == 49:
            p49 += 1
            listCountProductSearch.update({49: p49})
        elif p == 50:
            p50 += 1
            listCountProductSearch.update({50: p50})
        elif p == 51:
            p51 += 1
            listCountProductSearch.update({51: p51})
        elif p == 52:
            p52 += 1
            listCountProductSearch.update({52: p52})
        elif p == 53:
            p53 += 1
            listCountProductSearch.update({53: p53})
        elif p == 54:
            p54 += 1
            listCountProductSearch.update({54: p54})
        elif p == 55:
            p55 += 1
            listCountProductSearch.update({55: p55})
        elif p == 56:
            p56 += 1
            listCountProductSearch.update({56: p56})
        elif p == 57:
            p57 += 1
            listCountProductSearch.update({57: p57})
        elif p == 58:
            p58 += 1
            listCountProductSearch.update({58: p58})
        elif p == 59:
            p59 += 1
            listCountProductSearch.update({59: p59})
        elif p == 60:
            p60 += 1
            listCountProductSearch.update({60: p60})
        # -----
        elif p == 61:
            p61 += 1
            listCountProductSearch.update({61: p61})
        elif p == 62:
            p62 += 1
            listCountProductSearch.update({62: p62})
        elif p == 63:
            p63 += 1
            listCountProductSearch.update({63: p63})
        elif p == 64:
            p64 += 1
            listCountProductSearch.update({64: p64})
        elif p == 65:
            p65 += 1
            listCountProductSearch.update({65: p65})
        elif p == 66:
            p66 += 1
            listCountProductSearch.update({66: p66})
        elif p == 67:
            p67 += 1
            listCountProductSearch.update({67: p67})
        elif p == 68:
            p68 += 1
            listCountProductSearch.update({68: p68})
        elif p == 69:
            p69 += 1
            listCountProductSearch.update({69: p69})
        elif p == 70:
            p70 += 1
            listCountProductSearch.update({70: p70})
        elif p == 71:
            p71 += 1
            listCountProductSearch.update({71: p71})
        elif p == 72:
            p72 += 1
            listCountProductSearch.update({72: p72})
        elif p == 73:
            p73 += 1
            listCountProductSearch.update({73: p73})
        elif p == 74:
            p74 += 1
            listCountProductSearch.update({74: p74})
        elif p == 75:
            p75 += 1
            listCountProductSearch.update({75: p75})
        elif p == 76:
            p76 += 1
            listCountProductSearch.update({76: p76})
        elif p == 77:
            p77 += 1
            listCountProductSearch.update({77: p77})
        elif p == 78:
            p78 += 1
            listCountProductSearch.update({78: p78})
        elif p == 79:
            p79 += 1
            listCountProductSearch.update({79: p79})
        elif p == 80:
            p80 += 1
            listCountProductSearch.update({80: p80})
        # -----
        elif p == 81:
            p81 += 1
            listCountProductSearch.update({81: p81})
        elif p == 82:
            p82 += 1
            listCountProductSearch.update({82: p82})
        elif p == 83:
            p83 += 1
            listCountProductSearch.update({83: p83})
        elif p == 84:
            p84 += 1
            listCountProductSearch.update({84: p84})
        elif p == 85:
            p85 += 1
            listCountProductSearch.update({85: p85})
        elif p == 86:
            p86 += 1
            listCountProductSearch.update({86: p86})
        elif p == 87:
            p87 += 1
            listCountProductSearch.update({87: p87})
        elif p == 88:
            p88 += 1
            listCountProductSearch.update({88: p88})
        elif p == 89:
            p89 += 1
            listCountProductSearch.update({89: p89})
        elif p == 90:
            p90 += 1
            listCountProductSearch.update({90: p90})
        elif p == 91:
            p91 += 1
            listCountProductSearch.update({91: p91})
        elif p == 92:
            p92 += 1
            listCountProductSearch.update({92: p92})
        elif p == 93:
            p93 += 1
            listCountProductSearch.update({93: p93})
        elif p == 94:
            p94 += 1
            listCountProductSearch.update({94: p94})
        elif p == 95:
            p95 += 1
            listCountProductSearch.update({95: p95})
        elif p == 96:
            p96 += 1
            listCountProductSearch.update({96: p96})
        elif p == 97:
            p97 += 1
            listCountProductSearch.update({97: p97})
        elif p == 98:
            p98 += 1
            listCountProductSearch.update({98: p98})
        elif p == 99:
            p99 += 1
            listCountProductSearch.update({99: p99})
        elif p == 100:
            p100 += 1
            listCountProductSearch.update({100: p100})
        else:
            p101 += 1
            listCountProductSearch.update({101: p101})

    # ordenamiento de productos por numero de elementos busq

    products_sort_search = sorted(listCountProductSearch.items(), key=operator.itemgetter(1), reverse=True)
    products_sort2_search = sorted(listCountProductSearch.items(), key=operator.itemgetter(1), reverse=False)

    list = []
    # ------------------------------------------------- CATEGORIAS POR BUSQUEDA ...........................................
    valor = 0

    # CREACION DE LISTA DE OBJETOS PRODUCTOS
    for name in enumerate(products_sort_search):
        valor = name[1][0]
        num: str = name[1][1]

        for n in lifestore_products:
            if n[0] == valor:
                desc: str = n[1]
                # agrega en una lista de objeto Producto, numero de elementos buscados, descripcion, categoria y id
                list.append(Product(n[0], n[1], name[1][1], n[3]))
                # print("NUMERO DE ELEMENTOS BUSCADOS: ",name[1][1],"- DESCRIPCION DE PRODUCTO: " ,n[1]," - CATEGORIA: ",n[3],)

    print("")
    print(
        "............................................................................ BUSQUEDAS ................................................................")
    print("")

    print(
        "-----------------------------------------------------------------  ORDENAMIENTO POR CATEGORIAS  ------------------------------------- ")

    print("1º PROCESADORES:")
    print("")

    for pr in list:
        if pr.categorie == "procesadores":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("2 º Bocinas:")
    print("")

    for pr in list:
        if pr.categorie == "bocinas":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("3º Tarjetas de video:")
    print("")

    for pr in list:
        if pr.categorie == "tarjetas de video":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("4º Tarjetas madre:")
    print("")

    for pr in list:
        if pr.categorie == "tarjetas madre":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("5º Discos duros:")
    print("")

    for pr in list:
        if pr.categorie == "discos duros":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("6º Pantallas:")
    print("")

    for pr in list:
        if pr.categorie == "pantallas":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("7º Audifonos:")
    print("")

    for pr in list:
        if pr.categorie == "audifonos":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("8º Memorias USB:")
    print("")
    for pr in list:
        if pr.categorie == "memorias usb":
            print(" | NUMERO DE VECES BUSCADOS: ", pr.numElemSearch, " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")

    # -- MENORES VENTAS
    # print("-----------------------------------------Productos Ordenados por  score ------------------------------------------")

    listCountProduct2 = {}
    p1 = p2 = p3 = p4 = p5 = p6 = p7 = p8 = p9 = p10 = p11 = p12 = p13 = p14 = p15 = p16 = p17 = p18 = p19 = p20 = p21 = p22 = p23 = p24 = p25 = p26 = p27 = p28 = p29 = p30 = p31 = p32 = p33 = p34 = p35 = p36 = p37 = p38 = p39 = p40 = p41 = p42 = p43 = p44 = p45 = p46 = p47 = p48 = p49 = p50 = p51 = p52 = p53 = p54 = p55 = p56 = p57 = p58 = p59 = p60 = p61 = p62 = p63 = p64 = p65 = p66 = p67 = p68 = p69 = p70 = p71 = p72 = p73 = p74 = p75 = p76 = p77 = p78 = p79 = p80 = p81 = p82 = p83 = p84 = p85 = p86 = p87 = p88 = p89 = p90 = p91 = p92 = p93 = p94 = p95 = p96 = p97 = p98 = p99 = p100 = p101 = 0

    # se obtendra el numero de score de  cada producto vendido

    for p in lifestore_sales:
        if p[1] == 1:

            p1 += p[2]

            listCountProduct.update({1: p1})

        elif p[1] == 2:
            p2 += p[2]
            listCountProduct.update({2: p2})

        elif p[1] == 3:
            p3 += p[2]
            listCountProduct.update({3: p3})
        elif p[1] == 4:
            p4 += p[2]
            listCountProduct.update({4: p4})
        elif p[1] == 5:
            p5 += p[2]
            listCountProduct.update({5: p5})
        elif p[1] == 6:
            p6 += p[2]
            listCountProduct.update({6: p6})
        elif p[1] == 7:
            p7 += p[2]
            listCountProduct.update({8: p7})
        elif p[1] == 8:
            p8 += p[2]
            listCountProduct.update({8: p8})
        elif p[1] == 9:
            p9 += p[2]
            listCountProduct.update({9: p9})
        elif p[1] == 10:
            p10 += p[2]
            listCountProduct.update({10: p10})
        elif p[1] == 11:
            p11 += p[2]
            listCountProduct.update({11: p11})
        elif p[1] == 12:
            p12 += p[2]
            listCountProduct.update({12: p12})

        elif p[1] == 13:
            p13 += p[2]
            listCountProduct.update({13: p13})
        elif p[1] == 14:
            p14 += p[2]
            listCountProduct.update({14: p14})
        elif p[1] == 15:
            p15 += p[2]
            listCountProduct.update({15: p15})
        elif p[1] == 16:
            p16 += p[2]
            listCountProduct.update({16: p16})
        elif p[1] == 17:
            p17 += p[2]
            listCountProduct.update({17: p17})
        elif p[1] == 18:
            p18 += p[2]
            listCountProduct.update({18: p18})
        elif p[1] == 19:
            p19 += p[2]
            listCountProduct.update({19: p19})
        elif p[1] == 20:
            p20 += p[2]
            listCountProduct.update({20: p20})
        # -----
        elif p[1] == 21:
            p21 += p[2]
            listCountProduct.update({21: p21})
        elif p[1] == 22:
            p22 += p[2]
            listCountProduct.update({22: p22})

        elif p[1] == 23:
            p23 += p[2]
            listCountProduct.update({23: p23})
        elif p[1] == 24:
            p24 += p[2]
            listCountProduct.update({24: p24})
        elif p[1] == 25:
            p25 += p[2]
            listCountProduct.update({25: p25})
        elif p[1] == 26:
            p26 += p[2]
            listCountProduct.update({26: p26})
        elif p[1] == 27:
            p27 += p[2]
            listCountProduct.update({27: p27})
        elif p[1] == 28:
            p28 += p[2]
            listCountProduct.update({28: p28})
        elif p[1] == 29:
            p29 += p[2]
            listCountProduct.update({29: p29})
        elif p[1] == 30:
            p30 += p[2]
            listCountProduct.update({30: p30})
        elif p[1] == 31:
            p31 += p[2]
            listCountProduct.update({31: p31})
        elif p[1] == 32:
            p32 += p[2]
            listCountProduct.update({32: p32})

        elif p[1] == 13:
            p33 += p[2]
            listCountProduct.update({33: p33})
        elif p[1] == 34:
            p34 += p[2]
            listCountProduct.update({34: p34})
        elif p[1] == 35:
            p35 += p[2]
            listCountProduct.update({35: p35})
        elif p[1] == 36:
            p36 += p[2]
            listCountProduct.update({36: p36})
        elif p[1] == 37:
            p37 += p[2]
            listCountProduct.update({37: p37})
        elif p[1] == 38:
            p38 += p[2]
            listCountProduct.update({38: p38})
        elif p[1] == 39:
            p39 += p[2]
            listCountProduct.update({39: p39})
        elif p[1] == 40:
            p40 += p[2]
            listCountProduct.update({40: p40})
        # -----
        elif p[1] == 41:
            p41 += p[2]
            listCountProduct.update({41: p41})
        elif p[1] == 42:
            p42 += p[2]
            listCountProduct.update({42: p42})

        elif p[1] == 43:
            p43 += p[2]
            listCountProduct.update({43: p43})
        elif p[1] == 44:
            p44 += p[2]
            listCountProduct.update({44: p44})
        elif p[1] == 45:
            p45 += p[2]
            listCountProduct.update({45: p45})
        elif p[1] == 46:
            p46 += p[2]
            listCountProduct.update({46: p46})
        elif p[1] == 47:
            p47 += p[2]
            listCountProduct.update({47: p47})
        elif p[1] == 48:
            p48 += p[2]
            listCountProduct.update({48: p48})
        elif p[1] == 49:
            p49 += p[2]
            listCountProduct.update({49: p49})
        elif p[1] == 50:
            p50 += p[2]
            listCountProduct.update({50: p50})
        elif p[1] == 51:
            p51 += p[2]
            listCountProduct.update({51: p51})
        elif p[1] == 52:
            p52 += p[2]
            listCountProduct.update({52: p52})

        elif p[1] == 53:
            p53 += p[2]
            listCountProduct.update({53: p53})
        elif p[1] == 54:
            p54 += p[2]
            listCountProduct.update({54: p54})
        elif p[1] == 55:
            p55 += p[2]
            listCountProduct.update({55: p55})
        elif p[1] == 56:
            p56 += p[2]
            listCountProduct.update({56: p56})
        elif p[1] == 57:
            p57 += p[2]
            listCountProduct.update({57: p57})
        elif p[1] == 58:
            p58 += p[2]
            listCountProduct.update({58: p58})
        elif p[1] == 59:
            p59 += p[2]
            listCountProduct.update({59: p59})
        elif p[1] == 60:
            p46 += p[2]
            listCountProduct.update({60: p60})
        # -----
        elif p[1] == 61:
            p61 += p[2]
            listCountProduct.update({61: p61})
        elif p[1] == 62:
            p62 += p[2]
            listCountProduct.update({62: p62})

        elif p[1] == 63:
            p63 += p[2]
            listCountProduct.update({63: p63})
        elif p[1] == 64:
            p64 += p[2]
            listCountProduct.update({64: p64})
        elif p[1] == 65:
            p65 += p[2]
            listCountProduct.update({65: p65})
        elif p[1] == 66:
            p66 += p[2]
            listCountProduct.update({66: p66})
        elif p[1] == 67:
            p67 += p[2]
            listCountProduct.update({67: p67})
        elif p[1] == 68:
            p68 += p[2]
            listCountProduct.update({68: p68})
        elif p[1] == 69:
            p69 += p[2]
            listCountProduct.update({69: p69})
        elif p[1] == 70:
            p70 += p[2]
            listCountProduct.update({70: p70})
        elif p[1] == 71:
            p71 += p[2]
            listCountProduct.update({71: p71})
        elif p[1] == 72:
            p72 += p[2]
            listCountProduct.update({72: p72})

        elif p[1] == 73:
            p73 += p[2]
            listCountProduct.update({73: p73})
        elif p[1] == 74:
            p74 += p[2]
            listCountProduct.update({74: p74})
        elif p[1] == 75:
            p75 += p[2]
            listCountProduct.update({75: p75})
        elif p[1] == 36:
            p76 += p[2]
            listCountProduct.update({76: p76})
        elif p[1] == 77:
            p77 += p[2]
            listCountProduct.update({77: p77})
        elif p[1] == 78:
            p78 += p[2]
            listCountProduct.update({78: p78})
        elif p[1] == 79:
            p79 += p[2]
            listCountProduct.update({39: p79})
        elif p[1] == 80:
            p80 += p[2]
            listCountProduct.update({80: p80})
        # -----
        elif p[1] == 81:
            p81 += p[2]
            listCountProduct.update({81: p81})
        elif p[1] == 82:
            p82 += p[2]
            listCountProduct.update({82: p82})

        elif p[1] == 83:
            p83 += p[2]
            listCountProduct.update({83: p83})
        elif p[1] == 84:
            p84 += p[2]
            listCountProduct.update({84: p84})
        elif p[1] == 85:
            p85 += p[2]
            listCountProduct.update({85: p85})
        elif p[1] == 86:
            p86 += p[2]
            listCountProduct.update({86: p86})
        elif p[1] == 87:
            p87 += p[2]
            listCountProduct.update({87: p87})
        elif p[1] == 88:
            p88 += p[2]
            listCountProduct.update({88: p88})
        elif p[1] == 89:
            p89 += p[2]
            listCountProduct.update({89: p89})
        elif p[1] == 90:
            p90 += p[2]
            listCountProduct.update({90: p90})
        elif p[1] == 91:
            p91 += p[2]
            listCountProduct.update({91: p91})
        elif p[1] == 92:
            p92 += p[2]
            listCountProduct.update({92: p92})

        elif p[1] == 93:
            p93 += p[2]
            listCountProduct.update({93: p93})
        elif p[1] == 94:
            p94 += p[2]
            listCountProduct.update({94: p94})
        elif p[1] == 95:
            p95 += p[2]
            listCountProduct.update({95: p95})
        elif p[1] == 96:
            p96 += p[2]
            listCountProduct.update({96: p96})
        elif p[1] == 97:
            p97 += p[2]
            listCountProduct.update({97: p97})
        elif p[1] == 98:
            p98 += p[2]
            listCountProduct.update({98: p98})
        elif p[1] == 99:
            p99 += p[2]
            listCountProduct.update({99: p99})
        elif p[1] == 100:
            p100 += p[2]
            listCountProduct.update({100: p100})
        else:
            p101 += 1
            listCountProduct.update({101: p101})

    # ordenamiento de productos por SCORE POR MAYOR
    products_score = sorted(listCountProduct.items(), key=operator.itemgetter(1), reverse=True)
    # ordenamiento de productos por SCORE POR MENOR
    products_score2 = sorted(listCountProduct.items(), key=operator.itemgetter(1), reverse=False)

    print("")
    print("")
    print("")
    print(
        "☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ SCORE  ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★")
    print("")

    print(
        "-----------------------------------------------------------------  ORDENAMIENTO POR CATEGORIA   ------------------------------------- ")

    list_Score = []
    valor = 0
    for name in enumerate(products_score):
        # id
        valor = name[1][0]
        # numtotal
        num = name[1][1]

        for n in lifestore_products:
            if n[0] == valor:
                desc: str = n[1]
                # agrega en una lista de objeto Producto, numero de elementos score, descripcion, categoria y id
                list_Score.append(Product(n[0], desc, num, n[3]))

    print("1º PROCESADORES:")
    print("")

    for pr in list_Score:
        if pr.categorie == "procesadores":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("2 º Bocinas:")
    print("")

    for pr in list_Score:
        if pr.categorie == "bocinas":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("3º Tarjetas de video:")
    print("")

    for pr in list_Score:
        if pr.categorie == "tarjetas de video":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("4º Tarjetas madre:")
    print("")

    for pr in list_Score:
        if pr.categorie == "tarjetas madre":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("5º Discos duros:")
    print("")

    for pr in list_Score:
        if pr.categorie == "discos duros":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("6º Pantallas:")
    print("")

    for pr in list_Score:
        if pr.categorie == "pantallas":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("7º Audifonos:")
    print("")

    for pr in list_Score:
        if pr.categorie == "audifonos":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")
    print("8º Memorias USB:")
    print("")
    for pr in list_Score:
        if pr.categorie == "memorias usb":
            print(" | NUMERO DE SCORE TOTAL: ", pr.numElemSearch, " ★★★★★ ", " | DESCRIPCION: ", pr.description,
                  " | CATEGORIA:", pr.categorie, " | ID:", pr.id)

    print("...........................................................................................................")

    print("................................... VENTAS .....................................................")

    total = 0
    for value in listProduct:
        total += value.priceTotal

    print(" | TOTAL DE VENTAS ANUAL: ", "$", total)




else:
    print("Datos incorrectos")








